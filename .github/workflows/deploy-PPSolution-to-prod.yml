name: Deploy to Production Environment

# Currently triggering this workflow on custom events, using the api https://docs.github.com/en/rest/reference/repos#create-a-repository-dispatch-event
# Can be easily changed to other events https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows
# NOTE: You have to change env variables with appropriate values, if you are modifying it.
on:
 repository_dispatch:
   types: [deploy_to_prod]

jobs:
  build:

    env:
     solutionName: ${{ github.event.client_payload.solutionname }}
     requestId: ${{ github.event.client_payload.requestid }}
     projectId: ${{ github.event.client_payload.projectid }}
     targetEnvironmentUserId: ${{ github.event.client_payload.targetenvironmentuserid }}
     targetEnvironmentSecretName: ${{ github.event.client_payload.targetenvironmentsecretname }}
     targetEnvironmentUrl: ${{ github.event.client_payload.targetenvironmenturl }}

    runs-on: windows-2019

    steps:
    - name: 'clone this repo'
      uses: actions/checkout@v2-beta

    - name: Download artifact
      uses: dawidd6/action-download-artifact@v2
      with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          # Required, workflow file name or ID
          workflow: deploy-PPSolution-to-test.yml

    - name: 'Import the managed solution to the Prod (target) Environment'
      id: import-prod
      uses: microsoft/powerplatform-actions/import-solution@v0.1.8
      with:
        environment-url: ${{ env.targetEnvironmentUrl }}
        user-name: ${{ env.targetEnvironmentUserId }}
        password-secret: ${{ secrets[env.targetEnvironmentSecretName] }}
        solution-file: '${{env.solutionName}}\${{env.solutionName}}_managed.zip'

    # Reading the different power platform action status to upload the status as artifact, to easily communicate it using other jobs.
    - name: Save job status to a file (status.json)
      if: always()
      run: |
        $errors=@{}
        $outCome = echo "${{ steps.import-test.outputs.outcome }}"
        $errorMessage = echo "${{ steps.import.outputs.errorMessage }}"
        if ($outcome -eq "success" -or $outcome -eq "skipped") {
            return ""
          } else {
            if ($null -ne $errorMessage -and $errorMessage -ne "") {
              $errors["import-prod"] = $errorMessage
            } else {
              $errors["import-prod"] = "error occured in import-prod github action"
            }
          }

        $jobStatus = echo ${{ job.status }}
        $workflow = echo ${{ github.workflow }}
        $run = echo ${{ github.run_id }}
        $requestId = echo ${{ env.requestId }}
        $projectid = echo "${{ env.projectId }}"
        $errorStr = ConvertTo-Json -InputObject $errors
        $status = @{
          'status' = $jobStatus;
          'workflow' = "$workflow";
          'branch' = "";
          'run' = $run;
          'requestid' = $requestId;
          'projectid' = "$projectid"
          'errors' = "$errorStr"
        }
        $jsonString = ConvertTo-Json -InputObject $status
        $jsonString > status.json

    - name: Upload job status file as artifact
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: job_status
        path: status.json

  # This job is to notify the webhook url when the workflow is triggered on the custom event and the payload has the webhook url.
  # Otherwise this job can be ignored.
  notify:
    needs: [build]
    if: always()
    runs-on: windows-latest
    steps:

    - name: Download artifact job_status
      uses: actions/download-artifact@v1
      with:
        name: job_status
      continue-on-error: true

    - name: Reading status & Invoking the webhook
      if: always()
      run: |
        $fileExists = Test-Path job_status/status.json -PathType Leaf
        $uri = echo '${{ github.event.client_payload.webhookurl }}'
        $jsonData = ''
        if ($fileExists) {
          $jsonData = Get-Content job_status/status.json
          echo "Data read from status file :: " $jsonData
        } else {
          $workflow = echo ${{ github.workflow }}
          $repo = echo ${{ github.repository }}
          $run = echo ${{ github.run_id }}
          $requestId = echo ${{ github.event.client_payload.requestid }}
          $projectid = echo "${{ github.event.client_payload.projectid }}"
          $errors = @{
            "Actions"="Unable to get the status file from the previous job"
          }
          $errorStr = ConvertTo-Json -InputObject $errors
          $status = @{
            'status' = "$fileExists";
            'workflow' = "$workflow";
            'branch' = "";
            'repo' = $repo;
            'run' = $run;
            'requestid' = $requestId;
            'projectid' = "$projectid";
            'errors' = "$errorStr"
          }
          $jsonData = ConvertTo-Json -InputObject $status
          echo "Data constructed as status.json file is not present :: " $jsonData
        }
        echo "Invoking the WebHook Url"
        Invoke-RestMethod -Uri $uri -Body $jsonData  -Method POST -ContentType 'application/json'
        echo "Invoked the WebHook Url"
